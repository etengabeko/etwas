#include <QtTest>

#include <memory>

#include <QByteArray>
#include <QDataStream>
#include <QSharedPointer>

#include "protocol/protocol.h"

Q_DECLARE_METATYPE(QSharedPointer<protocol::AbstractMessage>)

class MessageSerializationTest : public QObject
{
    Q_OBJECT

private slots:
    void serializeMessage_data();
    void serializeMessage();

    void deserializeMessage_data();
    void deserializeMessage();

private:
    void makeTestData();

};

void MessageSerializationTest::deserializeMessage_data()
{
    makeTestData();
}

void MessageSerializationTest::serializeMessage_data()
{
    makeTestData();
}

void MessageSerializationTest::serializeMessage()
{
    QFETCH(QSharedPointer<protocol::AbstractMessage>, message);
    QFETCH(QByteArray, content);

    QCOMPARE(message->serialize(), content);
}

void MessageSerializationTest::deserializeMessage()
{
    QFETCH(QSharedPointer<protocol::AbstractMessage>, message);
    QFETCH(QByteArray, content);

    std::unique_ptr<protocol::AbstractMessage> repaired = protocol::AbstractMessage::deserialize(message->direction(), content);

    QVERIFY(repaired != nullptr);
    if (repaired)
    {
        QCOMPARE(repaired->serialize(), message->serialize());
    }
}

void MessageSerializationTest::makeTestData()
{
    QTest::addColumn<QSharedPointer<protocol::AbstractMessage>>("message");
    QTest::addColumn<QByteArray>("content");

    // incoming
    QByteArray content = QByteArray(protocol::incoming::DeviceIdentityMessage::size(), '\0');
    content[0] = static_cast<quint8>(protocol::incoming::MessageType::DeviceIdentity);
    QTest::newRow("DeviceIdentity")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::incoming::DeviceIdentityMessage())
            << content;

    QByteArray(protocol::incoming::ButtonsStateMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::incoming::MessageType::ButtonsState);
    QTest::newRow("ButtonsState")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::incoming::ButtonsStateMessage())
            << content;

    // outcoming
    QByteArray(protocol::outcoming::DeviceAddressMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::outcoming::MessageType::DeviceAddress);
    QTest::newRow("DeviceAddress")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::outcoming::DeviceAddressMessage())
            << content;

    QByteArray(protocol::outcoming::DisplayImagesMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::outcoming::MessageType::DisplayImages);
    QTest::newRow("DisplayImages")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::outcoming::DisplayImagesMessage())
            << content;

    QByteArray(protocol::outcoming::DisplayOptionsMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::outcoming::MessageType::DisplayOptions);
    QTest::newRow("DisplayOptions")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::outcoming::DisplayOptionsMessage())
            << content;

    QByteArray(protocol::outcoming::BlinkOptionsMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::outcoming::MessageType::BlinkOptions);
    QTest::newRow("BlinkOptions")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::outcoming::BlinkOptionsMessage())
            << content;

    QByteArray(protocol::outcoming::BrightOptionsMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::outcoming::MessageType::BrightOptions);
    QTest::newRow("BrightOptions")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::outcoming::BrightOptionsMessage())
            << content;

    QByteArray(protocol::outcoming::ImagesDataMessage::size(), '\0').swap(content);
    content[0] = static_cast<quint8>(protocol::outcoming::MessageType::ImagesData);
    QTest::newRow("ImagesData")
            << QSharedPointer<protocol::AbstractMessage>(new protocol::outcoming::ImagesDataMessage())
            << content;
}

int main(int argc, char* argv[])
{
    QCoreApplication app(argc, argv);
    Q_UNUSED(app);

    MessageSerializationTest tc;
    int res = QTest::qExec(&tc, argc, argv);

    return res;
}

#include "main.moc"
